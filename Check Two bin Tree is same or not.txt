#include<bits/stdc++.h>
#include<stack>
using namespace std;
#define t int t;cin>>t;while(t--)

struct node{
	int data;
	node *left,*right;
	node (int x)
	    {
	    	data = x;
	    	left = right = NULL;
		}
};
//recursive approach//
int isIdentical(Node* x, Node* y)
{
	// if both trees are empty, return true
	if (x == nullptr && y == nullptr)
		return 1;

	// if both trees are non-empty and value of their root node matches,
	// recur for their left and right sub-tree
	return (x && y) && (x->key == y->key) &&
			isIdentical(x->left, y->left) &&
			isIdentical(x->right, y->right);
}
	
// Iterative Approach//

int isIdentical(node *r1,node *r2)
    {
	if(r1 ==NULL&&r2==NULL)
	   return 1;
	if(r1==NULL&&r2!=NULL)
	   return 0;
	if(r2==NULL&&r1!=NULL)
	   return 0;
	stack<pair<node*,node*>>s;
	s.push({r1,r2});
	while(!s.empty())
	    {
	    	node *x = s.top().first;
	    	node *y = s.top().second;
	    	s.pop();
	    	
	    	if(x->data!=y->data)
	    	   return false;
	    	if(x->left&&y->left)
	    	   s.push({x->left,y->left});
	    	else if(x->left||y->left)
	    	   return 0;
	    	if(x->right&&y->right)
	    	   s.push({x->right,y->right});
	    	else if(x->right||y->right)
	    	   return 0; 
		}
		return 1;
    }
	
int main()
    {
    node *root = new node(15);
	root->left = new node(10);
	root->right = new node(20);
	root->left->left = new node(8);
	root->left->right = new node(12);
	root->right->left = new node(16);
	root->right->right = new node(25);
	root->right->right->right=new node(33);
	
	node *root1 = new node(15);
	root1->left = new node(10);
	root1->right = new node(20);
	root1->left->left = new node(8);
	root1->left->right = new node(12);
	root1->right->left = new node(16);
	root1->right->right = new node(25);
	root1->right->right->right=new node(33);
	if(isIdentical(root,root1)==1)
	   cout<<"True";
	else 
	   cout<<"False";
	return 0;
	}