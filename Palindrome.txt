#include<bits/stdc++.h>
using namespace std;

struct node{
	int data;
	node *next;
};

bool compare(node *head,node *second)
    {
    	node *temp1 = head;
    	node *temp2 = second;
    	while(temp1&&temp2)
    	    {
    	    	if(temp1->data==temp2->data)
    	    	   {
    	    	   	temp1 = temp1->next;
    	    	   	temp2 = temp2->next;
				   }
				else
				    return false;
			}
		if(temp1==NULL&&temp2==NULL)
		   return true;
		else
		   return false;
	}
void reverse(node **head)
    {
    	node *prev=NULL;
    	node *curr = *head;
    	node *Next;
    	while(curr!=NULL)
    	    {
    	    	Next = curr->next;
    	    	curr->next = prev;
    	    	prev = curr;
    	    	curr = Next;
			}
		*head = prev;
	}
	
bool checkPalindrome(node *head)
    {
    	if(!head&&head->next!=NULL)
    	   return false;
    	node *slow=head,*fast=head,*prev_slow,*midNode,*second;
    	bool res = true;
		while(fast&&fast->next)
    	    {
    	    	fast = fast->next->next;
    	    	prev_slow = slow;
    	    	slow = slow->next;
			}
		if(fast)
		   {
		   	midNode = slow;
		   	slow = slow->next;
		   }
		second = slow;
		prev_slow->next=NULL;
		reverse(&second);
		res = compare(head,second);
		if(!midNode)
		   {
		   	prev_slow->next = midNode;
		   	midNode->next = second;
		   }
		else
		   prev_slow->next = second;
		return res;  
	}
void push(node **head,int key)
    {
    	node *newNode = new node();
    	newNode->data = key;
    	newNode->next = *head;
    	*head = newNode;
	}
int main()
    {
    	node *head = NULL;
    	push(&head,1);
    	push(&head,1);
    	push(&head,3);
    	push(&head,2);
    	push(&head,3);
    	push(&head,1);
    	push(&head,7);
    	if(checkPalindrome(head))
    	   cout<<"True"<<endl;
    	else
    	   cout<<"False"<<endl;
    	return 0;
	}