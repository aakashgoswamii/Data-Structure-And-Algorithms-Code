#include<bits/stdc++.h>
#include<queue>
using namespace std;
struct node{
	int data;
	node *left,*right;
	
	node(int x)
	    {
	    	data = x;
	    	left=right=NULL;
		}
};

void deleteDeepest(node *root,node *d_node)
    {
    	queue<node*>q;
    	q.push(root);
    	while(!q.empty())
    	    {
    	    	node *temp = q.front();
    	    	q.pop();
    	    	if(temp==d_node)
    	    	   {
    	    	   	temp = NULL;
    	    	   	delete(d_node);
    	    	   	return;
				   }
				else
				   q.push(temp);
				if(temp->left)
				   {
				   	if(temp->left==d_node)
				   	    {
				   	   	temp=NULL;
				   	   	delete(d_node);
				   	   	return;
						}
					else
					   q.push(temp->left);
				   }
				if(temp->right)
				   {
				   	if(temp->right==d_node)
				   	    {
				   	   	temp->right=NULL;
				   	   	delete(d_node);
				   	   	return;
						}
					else
					   q.push(temp->right);
				   }
			}
	}

node *deletion(node *root,int key)
    {
    	node *req_node;
    	if(!root)
    	   return NULL;
    	   
    	if (root->left == NULL && root->right == NULL) 
		{ 
        if (root->data == key) 
            return NULL; 
        else
            return root; 
        } 
    	queue<node*>q;
    	q.push(root);
    	node *temp;
    	while(!q.empty())
    	    {
    	    	temp = q.front();
    	    	q.pop();
    	    	if(temp->data==key)
    	    	   {
    	    	   	req_node = temp;
				   }
				if(temp->left)
				   q.push(temp->left);
				if(temp->right)
				   q.push(temp->right);
			}
			if(req_node!=NULL)
			   {
			   	int x = temp->data;
			   	deleteDeepest(root,temp);
			   	req_node->data=x;
			   }
		return root;
	}

void printLevelOrder(node *root)
    {
    if(root==NULL)
	    return;
	queue<node*>q;
	q.push(root);
	while(!q.empty())
	    {
	    	node *temp = q.front();
	    	cout<<temp->data<<" ";
	        q.pop();
	        
	        if(temp->left)
	           q.push(temp->left);
	        if(temp->right)
	            q.push(temp->right);
		}
	}
	
int main()
{
    node *root = new node(10);
    root->left= new node(11);
    root->left->left= new node(7);
    root->left->right = new node(12);
    root->right = new node(9);
    root->right->left = new node(15);
    root->right->right = new node(8);
	
	int key = 11;
	root = deletion(root,key);
	cout<<"binary tree after deletion is"<<endl;
	printLevelOrder(root);
	return 0;	
}