// not the efficient one

#include<bits/stdc++.h>
using namespace std;

class node{
    public:
        int data;
        node *next;
};

int lengthList(node *head)
    {
        int count = 0;
        while(head!=NULL)
            {
                count++;
                head=head->next;
            }
        return count;
    }

void removeLoop(node *slow,node *head)
    {
        node *ptr1;
        node *ptr2;
        ptr1 = head;
        while(1)
            {
                ptr2 = slow;
                while(ptr2->next!=slow&&ptr2->next!=ptr1)
                    {
                        ptr2 = ptr2->next;
                    }
                if(ptr2->next==ptr1)
                   break;
                
                ptr1 = ptr1->next;
                    
                
            }
        ptr2->next = NULL;
    }
int detectAndCountLoop(node *head)
    {
        int flag = 0;
        node *slow = head;
        node *fast = head;
        while(fast!=NULL && fast->next!=NULL)
            {
                fast = fast->next->next;
                slow = slow->next;
                if(fast == slow)
                   {
                       removeLoop(slow,head);
                       return 1;
                   }
            }
        // int counter = 1;
        // node *ref = slow;
        // ref = ref->next;
        // while(ref!=slow)
        //     {
        //         counter++;
        //         ref = ref->next;
        //     }
        // if(flag == 0)
        //   return -1;
        // else
        //     return counter;
        return 0;
    }


void printList(node *head)
    {
        while(head!=NULL)
            {
                cout<<head->data<<" ";
                head = head->next;
            }
        return;
    }

void push(node **head,int value)
    {
        node *newNode = new node();
        newNode->data = value;
        newNode->next = *head;
        *head = newNode;
        return;
    }
    

int main()
    {
        node *head = NULL;
        push(&head,50);
        push(&head,20);
        push(&head,15);
        push(&head,4); 
        push(&head,10);
        head->next->next->next->next->next = head;
        if(detectAndCountLoop(head)==1)
           cout<<"loop is present"<<endl;
        else
            cout<<"loop is not present"<<endl;
        printList(head);
        return 0;
    }