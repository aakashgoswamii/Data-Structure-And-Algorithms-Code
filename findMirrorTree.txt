#include<bits/stdc++.h>
#include<algorithm>
using namespace std;

struct node{
	int data;
	node *left,*right;
	node(int x)
	   {
	   	data = x;
	   	left = right = NULL;
	   }
};

void inorder(node *root)
    {
    	if(!root)
    	   return;
    	inorder(root->left);
    	cout<<root->data<<" ";
    	inorder(root->right);
	}
// recursive approach//

void findMirror(node *root)
    {
    	if(!root)
    	   return;
    	else
    	   {
    	   	findMirror(root->left);
    	   	findMirror(root->right);
    	   	
    	   	swap(root->left,root->right);
		   }
	}
//iterative approach //
void findMirror(node *root)
    {
    	if(!root)
    	   return;
    	queue<node*>q;
    	q.push(root);
    	while(!q.empty())
    	    {
    	    	node *temp = q.front();
    	    	q.pop();
    	    	swap(temp->left,temp->right);
    	    	if(temp->left)
				q.push(temp->left);
				if(temp->right)
				q.push(temp->right);
			}
	}
	
int main()
    {
    	node *root = new node(1);
    	root->left = new node(2);
    	root->right = new node(3);
    	root->left->left = new node(4);
    	root->left->right = new node(5);
    	findMirror(root);
    	inorder(root);
    	return 0;
	}