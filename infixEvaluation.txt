#include<bits/stdc++.h>
#include<vector>
using namespace std;


   int precedence(char op) {
        if (op == '+'||op=='-') {
            return 1;
        }
        else if (op == '*'||op=='/') {
            return 2;
        }
        return 0;
    }

     int operation(int val1, int val2, char op) {
        if (op == '+') {
            return val1 + val2;
        } else if (op == '-') {
            return val1 - val2;
        } else if (op == '*') {
            return val1 * val2;
        } else {
            return val1 / val2;
        }
}

int main()
{

	string expe;
	cin >> expe;
	stack<int>operands;
	stack<char>operators;
	for (int i = 0; i < expe.length(); i++) {
            if (expe[i] == '(') {
                operators.push(expe[i]);
            } 
             else if (expe[i] == '+' || expe[i] == '-' || expe[i] == '*' || expe[i]== '/') {
                while (operators.size() > 0 && operators.top() != '(' &&
                    precedence(expe[i]) <= precedence(operators.top())) {
                   int val2 = operands.top();
                    operands.pop();
                    int val1 = operands.top();
                    operands.pop();
                    char op = operators.top();
                    operators.pop();

                    int opval = operation(val1, val2, op);
                    operands.push(opval);
                }

                operators.push(expe[i]);
            } else if (expe[i] == ')') {
                while (operators.size() > 0 && operators.top() != '(') {
                    int val2 = operands.top();
                    operands.pop();
                    int val1 = operands.top();
                    operands.pop();
                    char op = operators.top();
                    operators.pop();

                    int opval = operation(val1, val2, op);
                    operands.push(opval);
                }

                if (operators.size() > 0) {
                    operators.pop();
                }
            }
            
         else if(isdigit(expe[i])){
            int val = 0;
          
            while(i < expe.length() && 
                        isdigit(expe[i]))
            {
                val = (val*10) + (expe[i]-'0');
                i++;
            }
             
            operands.push(val);
            i--;
        }
	}

        while (operators.size() > 0) {
            int val2 = operands.top();
            operands.pop();
            int val1 = operands.top();
            operands.pop();
            char op = operators.top();
            operators.pop();

            int opval = operation(val1, val2, op);
            operands.push(opval);
        }

        int val = operands.top();
        cout<<val<<endl;
    }
