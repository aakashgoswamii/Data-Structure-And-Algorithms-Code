#include<bits/stdc++.h>
#include<queue>
using namespace std;

class node {
public:
	int data;
	node *left, *right;
};

void leftView(node *root)
{
	if (root == NULL)
		return;

	queue<node*>q;

	q.push(root);
	while (!q.empty())
	{
		int n = q.size();
		for (int i = 1; i <= n; i++)
		{
			node *temp = q.front();
			q.pop();

			if (i == 1)
				cout << temp->data << " ";

			if (temp->left != NULL) {
				q.push(temp->left);
			}
			if (temp->right != NULL)
				q.push(temp->right);
		}
	}
}

node* newNode(int value)
{
	node *createNode = new node();
	createNode->data = value;
	createNode->left = createNode->right = NULL;
	return createNode;
}

int main()
{
	node *root = NULL;
	root = newNode(4);
	root->left = newNode(5);
	root->right = newNode(2);
	root->right->left = newNode(3);
	root->right->right = newNode(1);
	root->right->left->left = newNode(6);
	root->right->left->right = newNode(7);

	leftView(root);

	return 0;
}


// Recursive approach :

#include<bits/stdc++.h>
#include<queue>
using namespace std;

class node {
public:
	int data;
	node *left, *right;
};

void printLeftView(node *root,int &maxLevel,int level)
    {
        if(root==NULL)
            return;
        
        if(maxLevel<level)
            {
                cout<<root->data<<" ";
                cout<<"maxLevel is"<<maxLevel<<" ";
                maxLevel = level;
            }
        printLeftView(root->left,maxLevel,level+1);
        printLeftView(root->right,maxLevel,level+1);
        
    }

node* newNode(int value)
{
	node *createNode = new node();
	createNode->data = value;
	createNode->left = createNode->right = NULL;
	return createNode;
}

int main()
{

    node* root = newNode(10);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(7);
    root->left->right = newNode(8);
    root->right->right = newNode(15);
    root->right->left = newNode(12);
    root->right->right->left = newNode(14);
    cout<<"Left view of binary tree is"<<endl;
    int maxLevel = -1;
    int level = 0;
    printLeftView(root,maxLevel,level);
}














