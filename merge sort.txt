#include<vector>
#include<cmath>
#include<algorithm>
#include<set>
#define ll long long
#define ull unsigned long long
#define pb push_back
#define pob pop_back
#define loop0(n) for(ll i=0;i<n;i++)
#define loopn(x,n,flow) for(ll j=x;j<n;j+=flow)
#define loop1(x,n,inc) for(ll i=x;i<n;i+=inc)
#define loop2(x,n,dec) for(ll i=x;i>=0;i-=dec)
#include<bits/stdc++.h>
#define t int t;cin>>t;while(t--)
using namespace std;

void merge(int A[], int n1, int index1, int B[], int n2, int index2, int C[], int index)
{
	while (n1 && n2)
	{
		if (A[index1] > B[index2])
		{
			C[index] = B[index2];
			index++;
			index2++;
			n2--;
		}
		else
		{
			C[index] = A[index1];
			index++;
			index1++;
			n1--;
		}
	}
	while (n1)
	{
		C[index] = A[index1];
		index++;
		index1++;
		n1--;
	}
	while (n2)
	{
		C[index] = B[index2];
		index++;
		index2++;
		n2--;
	}

}

void mergePass(int A[], int n, int L , int B[])
{
	int Q = n / (2 * L);
	int S = Q * 2 * L;
	int R = n - S;
	for (int i = 0; i < Q; i++)
	{
		int LB = 2 * L * i;
		merge(A, L, LB, A, L, LB + L, B, LB);
	}
	if (R <= L)
	{
		for (int j = 0; j < R; j++)
		{
			B[S + j] = A[S + j];

		}
	}
	else
	{
		merge(A, L, S, A, R - L, S + L, B, S);
	}
}

void merge_sort(int A[], int n) {

	int B[9];
	int L = 1;
	while (L < n)
	{
		mergePass(A, n, L, B);
		mergePass(B, n, 2 * L, A);
		L = 4 * L;
	}

}

int main()
{
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	int A[] = {12, 23, -1, 16, 19, 34, 18, 17, 43};
	int n = sizeof(A) / sizeof(A[0]);
	merge_sort(A, n);
	for (int i = 0; i < n; i++)
		cout << A[i] << " ";
	return 0;
}