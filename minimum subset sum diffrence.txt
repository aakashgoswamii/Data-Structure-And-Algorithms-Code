#include<bits/stdc++.h>
#include<vector>
using namespace std;


int subsetSum(vector<int>&arr, int n , int sum) {
	vector<vector<bool>>dp(n + 1, vector<bool>(sum + 1));

	for (int i = 0; i <= n; i++)
		dp[i][0] = true;

	for (int i = 0; i <= sum; i++)
		dp[0][i] = false;

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= sum; j++) {
			if (arr[i - 1] > j)
				dp[i][j] = dp[i - 1][j];
			else
			{
				dp[i][j] = dp[i - 1][j - arr[i - 1]] || dp[i - 1][j];
			}
		}
	}
	int diff = INT_MAX;
	for (int i = 0; i <= sum / 2; i++) {
		if (dp[n][i] == true)
		{
			diff = min(abs(sum - 2 * i), diff);
		}
		else
			continue;
	}
	return diff;
}

int main()
{
	vector<int>arr = {3, 1, 4, 2, 2, 1};
	int sum = accumulate(arr.begin(), arr.end(), 0);
	int n = arr.size();
	cout << subsetSum(arr, n, sum);
	return 0;
}