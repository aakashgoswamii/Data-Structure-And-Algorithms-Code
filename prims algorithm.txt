#include<bits/stdc++.h>
using namespace std;
#define vertex 5


void mst(vector<pair<int,int>>adj[],int src)
    {
        vector<int>key(vertex,1e9);
        vector<bool>mstvec(vertex,false);
        vector<int>parent(vertex,-1);
        
        key[src] = 0;
        
        for(int i=0;i<vertex-1;i++)
            {
                int mini = INT_MAX,ind;
                for(int j=0;j<vertex;j++)
                    {
                        if(mstvec[j]==false && key[j]<mini)
                            {
                                mini = key[j];
                                ind = j;
                            }
                    }
                mstvec[ind] = true;
                
                for(auto x:adj[ind])
                    {
                        int weight = x.second;
                        int node = x.first;
                        
                        if(mstvec[node]==false&&weight<key[node])
                            {
                                key[node] = weight;
                                parent[node] = ind;
                            }
                    }
            }
        for(int i=0;i<vertex;i++)
            cout<<key[i]<<" ";
    }

void addEdge(int u,int v,int wt,vector<pair<int,int>>adj[])
    {
        adj[u].push_back({v,wt});
        adj[v].push_back({u,wt});
        return;
    }
    
int main()
    {
        vector<pair<int,int>>adj[vertex];
        addEdge(0,3,6,adj);
        addEdge(0,1,2,adj);
        addEdge(1,3,8,adj);
        addEdge(1,2,3,adj);
        addEdge(2,4,7,adj);
        addEdge(1,4,5,adj);
        int src = 0;
        mst(adj,src);
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

OPTIMISED APPROACH:::

#include<bits/stdc++.h>
using namespace std;
#define vertex 5


void minimumSpanningTree(vector<pair<int,int>>adj[],int src)
    {
        vector<int>key(vertex,1e9);
        vector<bool>mst(vertex,false);
        vector<int>parent(vertex,-1);
        
        key[src] = 0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push({0,0});
        
        for(int i=0;i<vertex-1;i++)
            {
                int node = pq.top().second;
                pq.pop();
                
                for(auto x:adj[node])
                    {
                        int value = x.first;
                        int wt = x.second;
                        if(mst[value]==false&&key[value]>wt)
                            {
                                key[value] = wt;
                                parent[value] = node;
                                pq.push({key[value],value});
                            }
                    }
            }
        for(int i=0;i<vertex;i++)
            cout<<key[i]<<" ";
    }

void addEdge(int u,int v,int wt,vector<pair<int,int>>adj[])
    {
        adj[u].push_back({v,wt});
        adj[v].push_back({u,wt});
        return;
    }
    
int main()
    {
        vector<pair<int,int>>adj[vertex];
        addEdge(0,3,6,adj);
        addEdge(0,1,2,adj);
        addEdge(1,3,8,adj);
        addEdge(1,2,3,adj);
        addEdge(2,4,7,adj);
        addEdge(1,4,5,adj);
        int src = 0;
        minimumSpanningTree(adj,src);
    }