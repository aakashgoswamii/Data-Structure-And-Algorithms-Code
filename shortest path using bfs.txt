#include<bits/stdc++.h>
using namespace std;
#define vertex 9

int shortestPath(vector<int>adj[])
    {
        vector<int>dist(vertex,1e5);
        
        queue<int>q;
        q.push(0);
        dist[0] = 0;
        while(!q.empty())
            {
                int node = q.front();
                q.pop();
                
                for(auto x:adj[node])
                    {
                        if(dist[x]>dist[node]+1)
                            {
                                dist[x] = dist[node] + 1;
                                q.push(x);
                            }
                    }
            }
            
        return dist[vertex-1];
    }

void addEdge(int u,int v,vector<int>adj[])
    {
        adj[u].push_back(v);
        adj[v].push_back(u);
        return;
    }
    
int main()
    {
        vector<int>adj[vertex];
        addEdge(0,1,adj);
        addEdge(0,3,adj);
        addEdge(1,2,adj);
        addEdge(1,3,adj);
        addEdge(3,4,adj);
        addEdge(4,5,adj);
        addEdge(5,6,adj);
        addEdge(2,6,adj);
        addEdge(6,7,adj);
        addEdge(6,8,adj);
        addEdge(7,8,adj);
        
        int ans = shortestPath(adj);
        cout<<ans<<" ";
    }
    
    
    
    
    
    
    
    
    
    
    