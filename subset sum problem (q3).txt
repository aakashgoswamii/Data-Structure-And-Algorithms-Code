#include<bits/stdc++.h>
using namespace std;

bool isSubset(vector<int>set,int sum , int n)
    {
        vector<vector<bool>>dp(n+1,vector<bool>(sum+1));
        dp[0][0] = true;
        for(int i=1;i<=sum;i++)
            dp[0][i] = false;
        
        for(int i=1;i<=n;i++)
            dp[i][0] = true;
        
        for(int i=1;i<=n;i++)
            {
                for(int j=1;j<=sum;j++)
                    {
                        // if(dp[i-1][j]==true)
                        //     dp[i][j] = true;
                        if(j<set[i-1])
                            dp[i][j] = dp[i-1][j];
                        else if(j>=set[i-1])
                            {
                                dp[i][j] = dp[i-1][j]||dp[i-1][j-set[i-1]];
                            }
                    }
            }
        return dp[n][sum];
	}
	
int main()
    {
    	vector<int>set = {3,34,4,12,5,2};
    	int sum = 319;
    	int n = set.size();
    	if(isSubset(set,sum,n) == true)
    	   cout<<"true"<<endl;
    	else
    	   cout<<"No"<<endl;
    	return 0;
	}

	
int main()
    {
    	int set[] = {3,34,4,12,5,2};
    	int sum = 9;
    	int n = sizeof(set)/sizeof(set[0]);
    	if(isSubset(set,sum,n) == true)
    	   cout<<"true"<<endl;
    	else
    	   cout<<"No"<<endl;
    	return 0;
	}






***************************************************************************************************************************************************************************

#include<bits/stdc++.h>
using namespace std;

bool solve(vector<int>set , int n,int sum)
    {
        int dp[n+1][sum+1];
        
        for(int i=0;i<=n;i++)
            {
                for(int j=0;j<=sum;j++)
                    {
                        if(i == 0 && j == 0)
                           dp[i][j] = true;
                        
                        if(i ==0 && j>0)
                           dp[i][j] = false;
                        
                        if(i>0 && j == 0)
                           dp[i][j] = true;
                        
                        else
                            {
                                dp[i][j] = (dp[i-1][j]) || (dp[i-1][j-set[i-1]]);
                            }
                    }
            }
        return dp[n+1][sum+1];
    }

int main()
    {
        vector<int>set = {3,34,4,12,5,2};
        int n = set.size();
        int sum = 12;
        if(solve(set,n,sum) == true)
           cout<<"True"<<endl;
        else
           cout<<"False"<<endl;
        return 0;
    }

t.c : o(sizeof set * sum)
s.c : (sum*n)